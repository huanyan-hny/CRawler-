#pragma once
#include <string>
#include <vector>
#include <functional>
#include <iostream>
#include <boost/asio.hpp>
#include <boost/bind.hpp>
#include "Network.h"
#include <cpr/cpr.h>
#include <curl/curl.h>
#include "Task.h"
#include <mutex>

using namespace std;
using namespace Crawler;
using boost::asio::ip::tcp;

namespace Crawler {

    /// The session struct is a CRawlerPlusPlus wrapper of cpr session and cookie object.
    /// It also contains a mutex look to avoid race-condition when updating the cookie jar. \n
    /// Copy constructor is implemented.
    struct Session {
        cpr::Session session;
        cpr::Cookies cookiejar;
        mutex cookiejar_mtx;
        Session();
        Session(const Session &obj);
    };

    typedef std::map<string,shared_ptr<Session>> SessionMap;


    namespace Downloader {

        /// Boostasio_Downloader is a class that support HTTP get functionality.
        /// Its underlying implementation is using Boost ASIO to achieve async
        /// TCP socket connection, data transmission, etc. \n
        /// It can be used as a stand-alone Downloader.
        class Boostasio_Downloader {
        public:
            ///
            /// \param tsk  a Task type reference
            /// \return  a shared_ptr to response generated by get function
            shared_ptr<Response> get(Task &tsk);
        };

        /// Curl_Downloader that supports more advanced HTTP request,
        /// including session, cookie and authentication.
        class Curl_Downloader {

        private:
            SessionMap sm; ///< session map that maps session name (in tsk) to a session struct
        public:
            /// This function performs post (with or without payload) request
            /// \param tsk  a Task type reference
            /// \return  a shared_ptr to response generated by post function
            shared_ptr<Response> post(Task &tsk);

            /// This function performs get functionality
            /// \param tsk  a Task type reference
            /// \return  a shared_ptr to response generated by get function
            shared_ptr<Response> get(Task &tsk);
        };
    }

}