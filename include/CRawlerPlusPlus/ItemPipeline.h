#pragma once
#include <string>
#include <vector>
#include <unordered_map>
#include <assert.h>
#include <iostream>
#include <fstream>
#include "Item.h"
#include <boost/filesystem.hpp>
#include <mutex>
using namespace std;

namespace Crawler
{

	class Spider;


    ///
    /// The ItemPipeline class\n
    /// Be used to process items one by one\n
    /// The user should inherit this class and override the process_item() method
    ///
	class ItemPipeline
	{
	public:
		void handle_items(vector<shared_ptr<Item>>& items );  ///< process items sent from engine

        ///
        /// Process one item\n
        /// must be implemented by user\n
        /// The method is thread safe.\n
        /// Typically the user should store data to file or database in this method.
        /// \param item the item to process
        ///
		virtual void process_item(shared_ptr<Item> item) = 0;

        ///
        /// Be called by engine at the beginning of crawling\n
        /// Typically the user can open file in this process\n
        /// implementation by user is optional
        /// \param spider the spider user use
        ///
        virtual void open_spider(shared_ptr<Spider> spider) {};

        ///
        /// Be called by engine at the end of crawling\n
        /// Typically the user can open file in this process\n
        /// implementation by user is optional
        /// \param spider the spider user use
        ///
        virtual void close_spider(shared_ptr<Spider> spider) {};


	protected:
		///
		/// Simply write all the STRING fields of a item to a file,\n
		/// the file will look like: field1: value, field2: value, ...\n
		/// file name is randomly generated by boost::filesystem::unique_path()
		/// \param path the path you want to save the file, not including the filename itself
		/// \param item the item you want to save
		/// \return true if writing succeeded, otherwise false
		///
		bool simple_write(string path,shared_ptr<Item> item);

		///
		/// Simply write all the FILE fields of a item to a file,\n
		/// the file will look like: field1: value, field2: value, ...\n
		/// file name is randomly generated by boost::filesystem::unique_path()
		/// \param path the path you want to save the file, not including the filename itself
		/// \param item the item you want to save
		/// \return true if writing succeeded, otherwise false
		///
        bool simple_file_write(string path,shared_ptr<Item> item);

		///
		/// Simply write ONE FILE to a file,
		/// the file will look like: field1: value, field2: value, ...\n
		/// file name is randomly generated by boost::filesystem::unique_path()\n
		/// \param path the path you want to save the file, not including the filename itself
		/// \param item the item you want to save
		/// \param filename the filename you want to save
		/// \return true if writing succeeded, otherwise false
		///
        bool simple_file_write(string path,const File& file,string filename);

		string string_to_filename(string input); ///< make a string valid as a filename; replace invalid characters with '_'
    private:
        std::mutex lck;
		const std::string forbiddenChars = "\\/:?\"<>| \n\r\t";


	};
}


